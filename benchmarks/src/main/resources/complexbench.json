{
  "title": "Ahoj",
  "intro": "<head><title>Lorem Ipsum - All the facts - Lipsum generator</title><meta name=\"keywords\" content=\"Lorem Ipsum, Lipsum, Lorem, Ipsum, Text, Generate, Generator, Facts, Information, What, Why, Where, Dummy Text, Typesetting, Printing, de Finibus, Bonorum et Malorum, de Finibus Bonorum et Malorum, Extremes of Good and Evil, Cicero, Latin, Garbled, Scrambled, Lorem ipsum dolor sit amet, dolor, sit amet, consectetur, adipiscing, elit, sed, eiusmod, tempor, incididunt\" />  <meta name=\"description\" content=\"Reference site about Lorem Ipsum, giving information on its origins, as well as a random Lipsum generator.\" />  <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0\">  <meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />  <script type=\"text/javascript\" src=\"//static.amp.services/clients/StreamAMP/Lipsum.js\"></script>  <link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\" />  <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/020617.css\" />  </head>",
  "word": "tempor",
  "sentence": "Maecenas ut arcu sed felis malesuada fermentum eget sit amet diam.",
  "loop": [
    "aaa",
    "bbb"
  ],
  "loop2": [
    {
      "text": "<a href=\"#\">ccc</a>"
    },
    {
      "text": "ddd"
    }
  ],
  "longtext": "Praesent ut lobortis risus, ac vestibulum sapien. Etiam mi dui, interdum at risus et, mollis sodales ante. Phasellus finibus ut leo quis posuere. Morbi ut metus eget lectus rutrum posuere. Nulla facilisi. In tempor lacus id varius fermentum. Nulla nec est sit amet mauris dignissim aliquet. Aliquam nec congue est. Sed sit amet nunc vestibulum, ultrices metus eget, vehicula sapien. Donec non sapien fermentum, auctor nisi a, vehicula orci. Donec at ullamcorper dolor, sed consequat diam.  Nullam convallis risus euismod sollicitudin congue. Phasellus dictum velit id vestibulum rutrum. Sed ut augue quis est scelerisque rhoncus eget sit amet leo. Cras id lobortis mi, auctor scelerisque urna. Cras lorem orci, condimentum sed libero bibendum, suscipit egestas felis. Nunc dignissim enim a erat tempor feugiat. Vestibulum hendrerit, elit quis cursus vestibulum, magna risus ornare dui, a elementum neque dui vitae mi. Nam vitae aliquet neque. Vivamus tincidunt consequat ante id lacinia. Ut aliquam semper lacinia. Suspendisse dui erat, aliquet in arcu nec, ultricies pellentesque nulla. Praesent placerat enim sit amet purus vulputate mollis. Ut ultrices ultrices justo, id volutpat enim iaculis in. Proin egestas metus vel auctor facilisis. Proin in arcu felis.  Fusce commodo diam diam, eu malesuada ligula tempus quis. Fusce sem elit, sollicitudin in nunc quis, tincidunt porttitor sapien. Aenean sapien orci, auctor non tellus in, tempor vulputate arcu. Sed interdum, massa in volutpat ultricies, justo odio porttitor nisi, sed porta tellus odio eu orci. Maecenas hendrerit velit lorem, sit amet blandit quam commodo sed. Vestibulum lacus ex, sodales vel volutpat id, venenatis in nisl. Mauris facilisis tristique eros, quis elementum ipsum iaculis eu. Mauris a eros massa. Phasellus sit amet nulla lorem. Vivamus quis lorem purus. Suspendisse potenti.  Donec in felis ligula. Donec ac justo sit amet magna varius molestie. Praesent nec ante eu tellus iaculis ornare sit amet vel ipsum. Nulla facilisi. Suspendisse sed risus sit amet lorem feugiat bibendum. Donec nibh nibh, posuere et gravida ac, tristique id lacus. Morbi hendrerit sit amet lacus in volutpat. Donec elit lectus, imperdiet tincidunt dignissim sed, dapibus at ante. Sed pulvinar efficitur ipsum vel sagittis. Suspendisse faucibus quam nec erat iaculis finibus. Phasellus blandit fermentum porta. Vivamus sollicitudin, neque quis tincidunt eleifend, lacus arcu iaculis sem, eu mattis nisi tortor sed odio.  Cras eu mauris non dolor convallis luctus eu ut leo. Fusce ac velit nunc. Donec et ligula at nisl lobortis placerat. Orci varius natoque penatibus et magnis dis.",
  "bunchOfNumbers": [
    123,
    4567891235454,
    122222222222222222222222222222222222222222222,
    5420314,
    -12347559,
    6810,
    2569,
    31352,
    1895,
    4662,
    21924,
    16386,
    10372,
    4342,
    17208,
    2257,
    25692,
    27512,
    72,
    15992,
    20024,
    28316,
    27045,
    23203,
    17049,
    6486,
    32083,
    1287,
    22512,
    31281,
    21044,
    2838,
    31485,
    20975,
    24571,
    18703,
    27785,
    27140,
    17288,
    29680,
    31802,
    6444,
    13299,
    9406,
    10786,
    30507,
    11664,
    3710,
    25251,
    11736,
    19702,
    12507,
    7284,
    13979,
    2942,
    24334,
    20466,
    2257,
    25621,
    10210,
    770,
    13897,
    13049,
    32255,
    2104,
    4852,
    18191,
    29890,
    31992,
    2711,
    26802,
    31026,
    9155,
    7333,
    7665,
    19941,
    5072,
    19329,
    23652,
    30324,
    31065,
    10586,
    10063,
    5581,
    24566,
    13006,
    29915,
    12264,
    15263,
    22768,
    22474,
    16034,
    3897,
    2755,
    15521,
    6002,
    7607,
    944,
    3124,
    6831,
    3655,
    29926,
    5090,
    12810,
    4492,
    12755,
    32752,
    9564,
    32084,
    23636,
    7120,
    30381,
    1454,
    17184,
    3194,
    26020,
    30190,
    342,
    5516,
    12685,
    23110,
    27991,
    28719,
    27008,
    30746,
    11473,
    242,
    5586,
    12417,
    3366,
    12417,
    16073,
    524,
    17507,
    28883,
    5016,
    30262,
    28867,
    14581,
    29578,
    19735,
    21701,
    27191,
    21190,
    6117,
    30386,
    14442,
    3539,
    30728,
    19959,
    16225,
    21070,
    15182,
    12176,
    15310,
    13160,
    23649,
    15552,
    18746,
    3299,
    18918,
    31164,
    19372,
    19443,
    15903,
    15487,
    24459,
    13398,
    11587,
    6272,
    10208,
    31322,
    27974,
    4632,
    19744,
    1323,
    2250,
    1419,
    4863,
    210,
    21378,
    21088,
    21280,
    3792,
    496,
    3823,
    16952,
    24146,
    19375,
    2931,
    27445,
    5526,
    1327,
    14049,
    24969,
    17230,
    29536,
    16660,
    30628,
    8355,
    22933,
    8069,
    6910,
    18139,
    12701,
    26654,
    19462,
    14951,
    28073,
    24325,
    15161,
    16683,
    12645,
    3673,
    20475,
    13142,
    7496,
    4660,
    4520,
    26872,
    7591,
    31965,
    32398,
    8918,
    13246,
    24599,
    26148,
    10014,
    8491,
    24009,
    18370,
    31424,
    32078,
    25280,
    16795,
    12011,
    19166,
    3490,
    26962,
    14472,
    27815,
    9355,
    31155,
    7693,
    13028,
    18863,
    20835,
    20525,
    23523,
    25355,
    14629,
    31114,
    24552,
    14259,
    7264,
    5030,
    6090,
    644,
    15044,
    14581,
    24653,
    646,
    13238,
    23963,
    25926,
    30033,
    3206,
    12325,
    755,
    30168,
    26797,
    28571,
    6755,
    25184,
    3496,
    19784,
    11279,
    24331,
    7541,
    2034,
    16918,
    22170,
    380,
    8702,
    3661,
    7644,
    13732,
    9751,
    8289,
    28776,
    24332,
    174,
    29423,
    4802,
    24138,
    22581,
    2068,
    27344,
    2138,
    2823,
    24745,
    28935,
    31394,
    31500,
    21352,
    2122,
    18516,
    32631,
    26453,
    26057,
    1898,
    10603,
    15459,
    2278,
    19305,
    19120,
    9923,
    269,
    28871,
    18212,
    29046,
    20436,
    18386,
    25701,
    25238,
    9756,
    15514,
    27306,
    4333,
    17653,
    30130,
    29078,
    13820,
    28756,
    27810,
    2404,
    30879,
    13559,
    2268,
    24564,
    6848,
    4166,
    2400,
    22308,
    6444,
    21705,
    8660,
    16367,
    21975,
    4764,
    1811,
    18253,
    25200,
    20198,
    11186,
    17670,
    29954,
    26700,
    12209,
    1519,
    11585,
    9571,
    30597,
    25406,
    5559,
    25640,
    27810,
    3670,
    6431,
    30078,
    28235,
    13279,
    1476,
    30635,
    2819,
    7921,
    19572,
    11480,
    24288,
    8779,
    16244,
    26100,
    27032,
    8676,
    13530,
    5450,
    26346,
    10716,
    32151,
    5787,
    12236,
    10968,
    15358,
    10065,
    3606,
    20918,
    2937,
    31417,
    24588,
    9368,
    28727,
    20055,
    22648,
    30204,
    17922,
    25467,
    5357,
    4727,
    4179,
    29645,
    13506,
    20423,
    22977,
    7771,
    29099,
    3739,
    13221,
    22678,
    14456,
    12604,
    28465,
    26692,
    23573,
    11056,
    3989,
    27179,
    31974,
    6927,
    25828,
    23794,
    16295,
    21788,
    11082,
    6175,
    19224,
    29004,
    31643,
    24581,
    963,
    3054,
    21458,
    14470,
    23478,
    11668,
    22241,
    19809,
    15407,
    2694,
    9719,
    29863,
    15299,
    5417,
    23787,
    6104,
    16473,
    27777,
    515,
    15679,
    1936,
    26344,
    6705,
    18231,
    15364,
    17787,
    24407,
    1820,
    14024,
    23282,
    26401,
    14987,
    26336,
    15091,
    29457,
    17046,
    26759,
    18930,
    4088,
    9399,
    21625,
    13807,
    6494,
    4156,
    19224,
    30282,
    10260,
    2929,
    25291,
    10775,
    18608,
    27227,
    4351,
    25314,
    12690,
    19715,
    10333,
    4329,
    21535,
    24357,
    27611,
    15168,
    6577,
    21180,
    30260,
    3266,
    5458,
    24251,
    22197,
    9546,
    882,
    11054,
    23354,
    7377,
    15210,
    9810,
    4891,
    25470,
    12740,
    30182,
    3477,
    31348,
    24641,
    7829,
    23894,
    4563,
    27544,
    1460,
    8893,
    16312,
    25817,
    3736,
    31480,
    32394,
    24916,
    28972,
    2893,
    30375,
    20456,
    25090,
    7153,
    21338,
    3376,
    30507,
    28715,
    18586,
    7550,
    838,
    11288,
    20290,
    31020,
    14765,
    18870,
    22893,
    22594,
    9997,
    27457,
    17371,
    11457,
    3582,
    915,
    4506,
    7318,
    32395,
    4133,
    32235,
    28600,
    7026,
    29842,
    16288,
    32116,
    4227,
    4858,
    2724,
    1967,
    806,
    21310,
    9517,
    1644,
    32598,
    29807,
    32665,
    14595,
    15909,
    22790,
    4422,
    25906,
    17479,
    21793,
    4595,
    21061,
    22708,
    9102,
    28380,
    22335,
    13235,
    27847,
    18167,
    20261,
    24921,
    1687,
    19609,
    29148,
    6546,
    22333,
    31115,
    7352,
    10875,
    7864,
    8996,
    10705,
    4903,
    8893,
    25300,
    20813,
    31684,
    29722,
    13951,
    16395,
    18747,
    18547,
    4689,
    8687,
    27649,
    301,
    31023,
    8116,
    28148,
    16422,
    28377,
    20301,
    18110,
    15218,
    16681,
    24656,
    4783,
    15029,
    32008,
    15658,
    22893,
    8236,
    26363,
    27797,
    17130,
    18895,
    15842,
    16046,
    15850,
    29793,
    32441,
    1829,
    15572,
    4362,
    10517,
    10453,
    4663,
    8772,
    18569,
    43,
    25194,
    14178,
    20344,
    10536,
    29396,
    4258,
    2424,
    1411,
    19287,
    1664,
    17069,
    9412,
    9901,
    10664,
    4441,
    27031,
    29560,
    20283,
    10309,
    12642,
    17309,
    9982,
    14471,
    113,
    14345,
    24988,
    10567,
    19008,
    992,
    29136,
    19052,
    26187,
    10547,
    6628,
    3955,
    7175,
    10886,
    6380,
    8587,
    30173,
    8044,
    25656,
    6818,
    17945,
    3553,
    11259,
    12208,
    345,
    31543,
    22517,
    12987,
    16084,
    32500,
    27458,
    16197,
    14077,
    19679,
    26764,
    317,
    20671,
    23133,
    19369,
    14090,
    912,
    25998,
    18046,
    8087,
    4116,
    24426,
    16674,
    1522,
    32470,
    9563,
    8340,
    17648,
    13116,
    19599,
    29856,
    13461,
    18374,
    19606,
    26448,
    1690,
    19338,
    21138,
    17888,
    647,
    8049,
    11884,
    964,
    28721,
    2249,
    20334,
    10043,
    3161,
    13564,
    28089,
    11249,
    17680,
    19747,
    27923,
    19202,
    19450,
    4718,
    27542,
    4330,
    17834,
    14374,
    1418,
    31295,
    32748,
    21024,
    24975,
    1671,
    7594,
    13346,
    19559,
    8241,
    21395,
    31443,
    9206,
    17348,
    925,
    29540,
    27392,
    4086,
    10336,
    22713,
    15335,
    28016,
    9693,
    10491,
    14451,
    29143,
    15209,
    9225,
    705,
    276,
    23599,
    2123,
    31571,
    23580,
    23148,
    23779,
    25251,
    30742,
    4357,
    12042,
    6216,
    25752,
    10717,
    15422,
    10333,
    11642,
    12194,
    4957,
    15729,
    22530,
    27670,
    31064,
    17778,
    4595,
    8787,
    32229,
    970,
    23997,
    8687,
    1675,
    24273,
    32286,
    3799,
    23076,
    23098,
    26947,
    14087,
    15581,
    24921,
    18444,
    27623,
    31137,
    11429,
    5573,
    13791,
    21762,
    17215,
    25985,
    26719,
    176,
    15747,
    21621,
    31241,
    758,
    26217,
    7260,
    219,
    27187,
    31257,
    8906,
    28863,
    22762,
    8425,
    32662,
    13071,
    31523,
    26841,
    27158,
    14337,
    18994,
    12835,
    9192,
    17364,
    24264,
    14765,
    31155,
    13258,
    31981,
    24373,
    7209,
    32157,
    7352,
    28830,
    30630,
    8110,
    22279,
    5123,
    8330,
    16699,
    3612,
    17236,
    12794,
    26375,
    25661,
    12688,
    6678,
    24417,
    6761,
    1068,
    5986,
    25755,
    13903,
    15178,
    10351,
    5399,
    29944,
    8739,
    18657,
    29157,
    344,
    25866,
    28546,
    7696,
    21929,
    26409,
    15807,
    11440,
    31532,
    24137,
    28139,
    2376,
    8605,
    8165,
    28751,
    1499,
    20853,
    2661,
    25916,
    27614,
    3730,
    31902,
    20602,
    17633,
    14312,
    30953,
    23033,
    11488,
    6924,
    8922,
    7877,
    7268,
    2021,
    3656,
    14965,
    23950,
    30065,
    30772,
    2622,
    28829,
    22141,
    30762,
    31205,
    30746,
    6159,
    27189,
    32245,
    27013,
    29850,
    25393,
    21859,
    812,
    24527,
    9693,
    18446,
    6072,
    7879,
    8711,
    17560,
    14803,
    17633,
    25438,
    22072,
    19654,
    29094,
    4269,
    10836,
    26391,
    2273,
    13459,
    22452,
    24414,
    11453,
    20889,
    22392,
    17612,
    15310,
    21870,
    11857,
    12393,
    14495,
    949,
    13205,
    6255,
    10642,
    31651,
    12327,
    18521,
    7594,
    29887,
    557,
    25228,
    22557,
    22629,
    12114,
    18883,
    26898,
    22951,
    12506,
    29171,
    3642
  ],
  "payload": [
    {
      "id": "0676a225-fd12-11e7-b1e1-005056854569",
      "name": "Node.js execution & evaluation [outfile]",
      "version": 2,
      "createdAt": 1516363952,
      "updatedAt": 1516363964,
      "description": "Node.js",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "source",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "source-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "node",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "source-file": {
                "type": "file",
                "value": "source-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": ""
              },
              "output-file": {
                "type": "file",
                "value": "actual-output"
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": "$actual-output"
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "source-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": false,
        "producesFiles": true
      },
      "runtimeEnvironmentIds": [
        "node-linux"
      ]
    },
    {
      "id": "1079c3b4-9eff-11e7-869b-005056854569",
      "name": "Python execution & evaluation [stdout]",
      "version": 5,
      "createdAt": 1506027599,
      "updatedAt": 1506702878,
      "description": "python",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "source",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "pyc-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "python3",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "pyc-file": {
                "type": "file",
                "value": "pyc-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": "actual-output"
              },
              "output-file": {
                "type": "file",
                "value": ""
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": ""
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "pyc-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": true,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "python3"
      ]
    },
    {
      "id": "140a5d47-fd12-11e7-b1e1-005056854569",
      "name": "Node.js execution & evaluation [stdout]",
      "version": 2,
      "createdAt": 1516363974,
      "updatedAt": 1516363985,
      "description": "Node.js",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "source",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "source-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "node",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "source-file": {
                "type": "file",
                "value": "source-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": "actual-output"
              },
              "output-file": {
                "type": "file",
                "value": ""
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": ""
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "source-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": true,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "node-linux"
      ]
    },
    {
      "id": "255aff53-9a50-11e7-869b-005056854569",
      "name": "MCS Compilation",
      "version": 2,
      "createdAt": 1505512667,
      "updatedAt": 1505512717,
      "description": "Use MCS compiler for csharp source codes.",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [
        "76e54166-a6d9-11e7-a937-00505601122b",
        "76e63d01-a6d9-11e7-a937-00505601122b"
      ],
      "pipeline": {
        "boxes": [
          {
            "name": "sources",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "source-files"
              }
            }
          },
          {
            "name": "external-sources",
            "type": "fetch-files",
            "portsIn": {
              "remote": {
                "type": "remote-file[]",
                "value": "external-sources"
              }
            },
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "compilation",
            "type": "mcs",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": ""
              },
              "main-class": {
                "type": "string",
                "value": "main-class"
              },
              "external-sources": {
                "type": "file[]",
                "value": "input-files"
              },
              "source-files": {
                "type": "file[]",
                "value": "source-files"
              },
              "extra-files": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": {
              "assembly": {
                "type": "file",
                "value": "assembly"
              }
            }
          },
          {
            "name": "assembly",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "assembly"
              }
            },
            "portsOut": []
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "source-files",
            "type": "file[]",
            "value": []
          },
          {
            "name": "external-sources",
            "type": "remote-file[]",
            "value": [
              "Reader.cs",
              "Wrapper.cs"
            ]
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": [
              "ReCodEx_Csharp_Reader.cs",
              "ReCodEx_Csharp_Wrapper.cs"
            ]
          },
          {
            "name": "main-class",
            "type": "string",
            "value": "CodEx.Wrapper"
          },
          {
            "name": "assembly",
            "type": "file",
            "value": "program.exe"
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "mono"
      ]
    },
    {
      "id": "3572604c-c06e-11e7-a937-00505601122b",
      "name": "Mono execution & evaluation [outfile]",
      "version": 2,
      "createdAt": 1509696525,
      "updatedAt": 1509696546,
      "description": "Mono stdin-file execution & evaluation",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "binary",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "assembly"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "mono-exec",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "assembly": {
                "type": "file",
                "value": "assembly"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": ""
              },
              "output-file": {
                "type": "file",
                "value": "actual-output"
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": "$actual-output"
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "assembly",
            "type": "file",
            "value": "program.exe"
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": false,
        "producesFiles": true
      },
      "runtimeEnvironmentIds": [
        "mono"
      ]
    },
    {
      "id": "38bd2dcf-9cae-11e7-869b-005056854569",
      "name": "G++ Compilation",
      "version": 2,
      "createdAt": 1505772975,
      "updatedAt": 1505772998,
      "description": "G++ compilation pipeline",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "sources",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "source-files"
              }
            }
          },
          {
            "name": "compilation",
            "type": "g++",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "args"
              },
              "source-files": {
                "type": "file[]",
                "value": "source-files"
              },
              "extra-files": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": {
              "binary-file": {
                "type": "file",
                "value": "binary-file"
              }
            }
          },
          {
            "name": "binary",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "binary-file"
              }
            },
            "portsOut": []
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "args",
            "type": "string[]",
            "value": [
              "-std=c++1z",
              "-O3",
              "-lm"
            ]
          },
          {
            "name": "source-files",
            "type": "file[]",
            "value": []
          },
          {
            "name": "binary-file",
            "type": "file",
            "value": "a.out"
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "cxx-gcc-linux"
      ]
    },
    {
      "id": "46253195-9e47-11e7-869b-005056854569",
      "name": "Javac Compilation",
      "version": 4,
      "createdAt": 1505948661,
      "updatedAt": 1505949067,
      "description": "Compilation with javac.",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "sources",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "source-files"
              }
            }
          },
          {
            "name": "compilation",
            "type": "javac",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": ""
              },
              "source-files": {
                "type": "file[]",
                "value": "source-files"
              },
              "extra-files": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": {
              "class-files": {
                "type": "file[]",
                "value": "classes"
              }
            }
          },
          {
            "name": "classes",
            "type": "files-out",
            "portsIn": {
              "output": {
                "type": "file[]",
                "value": "classes"
              }
            },
            "portsOut": []
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "source-files",
            "type": "file[]",
            "value": []
          },
          {
            "name": "classes",
            "type": "file[]",
            "value": []
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "java"
      ]
    },
    {
      "id": "65d94507-c06e-11e7-a937-00505601122b",
      "name": "Python execution & evaluation [outfile]",
      "version": 2,
      "createdAt": 1509696606,
      "updatedAt": 1509696617,
      "description": "Python stdin-file execution & evaluation",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "source",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "pyc-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "python3",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "pyc-file": {
                "type": "file",
                "value": "pyc-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": ""
              },
              "output-file": {
                "type": "file",
                "value": "actual-output"
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": "$actual-output"
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "pyc-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": false,
        "producesFiles": true
      },
      "runtimeEnvironmentIds": [
        "python3"
      ]
    },
    {
      "id": "73daa928-a22e-11e7-869b-005056854569",
      "name": "ELF execution & evaluation [stdout]",
      "version": 4,
      "createdAt": 1506377805,
      "updatedAt": 1506702831,
      "description": "stdin/out",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "binary",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "binary-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "elf-exec",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "binary-file": {
                "type": "file",
                "value": "binary-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": "actual-output"
              },
              "output-file": {
                "type": "file",
                "value": ""
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": ""
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "binary-file",
            "type": "file",
            "value": "a.out"
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": true,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "c-gcc-linux",
        "cxx-gcc-linux",
        "freepascal-linux"
      ]
    },
    {
      "id": "76b24558-c06d-11e7-a937-00505601122b",
      "name": "ELF execution & evaluation [outfile]",
      "version": 3,
      "createdAt": 1509696205,
      "updatedAt": 1509696247,
      "description": "ELF stdin->file execution",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "binary",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "binary-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "elf-exec",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "binary-file": {
                "type": "file",
                "value": "binary-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": ""
              },
              "output-file": {
                "type": "file",
                "value": "actual-output"
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": "$actual-output"
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "binary-file",
            "type": "file",
            "value": "a.out"
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": false,
        "producesFiles": true
      },
      "runtimeEnvironmentIds": [
        "c-gcc-linux",
        "cxx-gcc-linux",
        "freepascal-linux"
      ]
    },
    {
      "id": "87c128f4-a22e-11e7-869b-005056854569",
      "name": "Mono execution & evaluation [stdout]",
      "version": 4,
      "createdAt": 1506377838,
      "updatedAt": 1506702884,
      "description": "stdin/out",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "binary",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "assembly"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "mono-exec",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "assembly": {
                "type": "file",
                "value": "assembly"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": "actual-output"
              },
              "output-file": {
                "type": "file",
                "value": ""
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": ""
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "assembly",
            "type": "file",
            "value": "program.exe"
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": true,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "mono"
      ]
    },
    {
      "id": "9418ecf3-fcff-11e7-b1e1-005056854569",
      "name": "PHP execution & evaluation [stdout]",
      "version": 1,
      "createdAt": 1516356029,
      "updatedAt": 1516356029,
      "description": "PHP",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "source",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "source-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "php",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "source-file": {
                "type": "file",
                "value": "source-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": "actual-output"
              },
              "output-file": {
                "type": "file",
                "value": ""
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": ""
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "source-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": true,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "php-linux"
      ]
    },
    {
      "id": "a1b191ce-9a50-11e7-869b-005056854569",
      "name": "GCC Compilation",
      "version": 2,
      "createdAt": 1505512876,
      "updatedAt": 1505512896,
      "description": "Compile C++ program with GCC.",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "sources",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "source-files"
              }
            }
          },
          {
            "name": "compilation",
            "type": "gcc",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "args"
              },
              "source-files": {
                "type": "file[]",
                "value": "source-files"
              },
              "extra-files": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": {
              "binary-file": {
                "type": "file",
                "value": "binary-file"
              }
            }
          },
          {
            "name": "binary",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "binary-file"
              }
            },
            "portsOut": []
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "args",
            "type": "string[]",
            "value": [
              "-std=gnu11",
              "-O3",
              "-lm"
            ]
          },
          {
            "name": "source-files",
            "type": "file[]",
            "value": []
          },
          {
            "name": "binary-file",
            "type": "file",
            "value": "a.out"
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "c-gcc-linux"
      ]
    },
    {
      "id": "a723be1e-9985-11e7-869b-005056854569",
      "name": "FreePascal Compilation",
      "version": 3,
      "createdAt": 1505425697,
      "updatedAt": 1505425923,
      "description": "FreePascal compilation pipeline",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "binary-file"
              }
            },
            "portsOut": []
          },
          {
            "name": "sources",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "source-files"
              }
            }
          },
          {
            "name": "compile",
            "type": "fpc",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "args"
              },
              "source-files": {
                "type": "file[]",
                "value": "source-files"
              },
              "extra-files": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": {
              "binary-file": {
                "type": "file",
                "value": "binary-file"
              }
            }
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "args",
            "type": "string[]",
            "value": [
              "-O2",
              "-Sg",
              "-Ci",
              "-Cr",
              "-Ct"
            ]
          },
          {
            "name": "binary-file",
            "type": "file",
            "value": "a.out"
          },
          {
            "name": "source-files",
            "type": "file[]",
            "value": ""
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "freepascal-linux"
      ]
    },
    {
      "id": "b3a62609-fd0e-11e7-b1e1-005056854569",
      "name": "Compilation source file pass-through",
      "version": 2,
      "createdAt": 1516362524,
      "updatedAt": 1516362555,
      "description": "Single file pass-through pipeline",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "source",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "source-file"
              }
            }
          },
          {
            "name": "out",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "source-file"
              }
            },
            "portsOut": []
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          },
          {
            "name": "extras-out",
            "type": "files-out",
            "portsIn": {
              "output": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": []
          }
        ],
        "variables": [
          {
            "name": "source-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "node-linux",
        "php-linux"
      ]
    },
    {
      "id": "cb536605-fd0e-11e7-b1e1-005056854569",
      "name": "Compilation source files pass-through",
      "version": 2,
      "createdAt": 1516362564,
      "updatedAt": 1516362583,
      "description": "Multiple files pass-through pipeline",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "sources",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "source-files"
              }
            }
          },
          {
            "name": "outs",
            "type": "files-out",
            "portsIn": {
              "output": {
                "type": "file[]",
                "value": "source-files"
              }
            },
            "portsOut": []
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          },
          {
            "name": "extras-out",
            "type": "files-out",
            "portsIn": {
              "output": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": []
          }
        ],
        "variables": [
          {
            "name": "source-files",
            "type": "file[]",
            "value": []
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": []
    },
    {
      "id": "ea128485-c06d-11e7-a937-00505601122b",
      "name": "Java execution & evaluation [outfile]",
      "version": 2,
      "createdAt": 1509696398,
      "updatedAt": 1509696414,
      "description": "Java stdin-file execution & evaluation",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [
        "ec017d2f-a6d9-11e7-a937-00505601122b"
      ],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "runner-fetch",
            "type": "fetch-file",
            "portsIn": {
              "remote": {
                "type": "remote-file",
                "value": "remote-runner"
              }
            },
            "portsOut": {
              "input": {
                "type": "file",
                "value": "runner-file"
              }
            }
          },
          {
            "name": "classes",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "classes"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "java-runner",
            "portsIn": {
              "runner": {
                "type": "file",
                "value": "runner-file"
              },
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "class-files": {
                "type": "file[]",
                "value": "classes"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": ""
              },
              "output-file": {
                "type": "file",
                "value": "actual-output"
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "remote-runner",
            "type": "remote-file",
            "value": "javarun.class"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": "$actual-output"
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "runner-file",
            "type": "file",
            "value": "javarun.class"
          },
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "classes",
            "type": "file[]",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": false,
        "producesFiles": true
      },
      "runtimeEnvironmentIds": [
        "java"
      ]
    },
    {
      "id": "ef2ec146-fcfe-11e7-b1e1-005056854569",
      "name": "PHP execution & evaluation [outfile]",
      "version": 1,
      "createdAt": 1516355752,
      "updatedAt": 1516355752,
      "description": "PHP stdin-file execution & evaluation",
      "author": "7742f974-a6ea-11e7-a937-00505601122b",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "source",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "source-file"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "php",
            "portsIn": {
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "source-file": {
                "type": "file",
                "value": "source-file"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": ""
              },
              "output-file": {
                "type": "file",
                "value": "actual-output"
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": "$actual-output"
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "source-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": false,
        "producesFiles": true
      },
      "runtimeEnvironmentIds": [
        "php-linux"
      ]
    },
    {
      "id": "f0e82fc8-9ec7-11e7-869b-005056854569",
      "name": "Java execution & evaluation [stdout]",
      "version": 5,
      "createdAt": 1506003923,
      "updatedAt": 1506721786,
      "description": "stdin/out",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [
        "ec017d2f-a6d9-11e7-a937-00505601122b"
      ],
      "pipeline": {
        "boxes": [
          {
            "name": "input",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "stdin-file"
              }
            }
          },
          {
            "name": "runner-fetch",
            "type": "fetch-file",
            "portsIn": {
              "remote": {
                "type": "remote-file",
                "value": "remote-runner"
              }
            },
            "portsOut": {
              "input": {
                "type": "file",
                "value": "runner-file"
              }
            }
          },
          {
            "name": "classes",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "classes"
              }
            }
          },
          {
            "name": "expected",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "expected-output"
              }
            }
          },
          {
            "name": "judge",
            "type": "judge",
            "portsIn": {
              "judge-type": {
                "type": "string",
                "value": "judge-type"
              },
              "actual-output": {
                "type": "file",
                "value": "actual-output"
              },
              "expected-output": {
                "type": "file",
                "value": "expected-output"
              },
              "args": {
                "type": "string[]",
                "value": "judge-args"
              },
              "custom-judge": {
                "type": "file",
                "value": "custom-judge"
              }
            },
            "portsOut": []
          },
          {
            "name": "run",
            "type": "java-runner",
            "portsIn": {
              "runner": {
                "type": "file",
                "value": "runner-file"
              },
              "args": {
                "type": "string[]",
                "value": "run-args"
              },
              "stdin": {
                "type": "file",
                "value": "stdin-file"
              },
              "input-files": {
                "type": "file[]",
                "value": "input-files"
              },
              "class-files": {
                "type": "file[]",
                "value": "classes"
              }
            },
            "portsOut": {
              "stdout": {
                "type": "file",
                "value": "actual-output"
              },
              "output-file": {
                "type": "file",
                "value": ""
              }
            }
          },
          {
            "name": "debug-output",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "actual-output"
              }
            },
            "portsOut": []
          },
          {
            "name": "input-files",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "input-files"
              }
            }
          },
          {
            "name": "custom-judge",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "custom-judge"
              }
            }
          }
        ],
        "variables": [
          {
            "name": "remote-runner",
            "type": "remote-file",
            "value": "javarun.class"
          },
          {
            "name": "judge-type",
            "type": "string",
            "value": "$judge-type"
          },
          {
            "name": "actual-output",
            "type": "file",
            "value": ""
          },
          {
            "name": "expected-output",
            "type": "file",
            "value": "expected.out"
          },
          {
            "name": "runner-file",
            "type": "file",
            "value": "javarun.class"
          },
          {
            "name": "run-args",
            "type": "string[]",
            "value": "$run-args"
          },
          {
            "name": "stdin-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "classes",
            "type": "file[]",
            "value": ""
          },
          {
            "name": "input-files",
            "type": "file[]",
            "value": "$actual-inputs"
          },
          {
            "name": "custom-judge",
            "type": "file",
            "value": ""
          },
          {
            "name": "judge-args",
            "type": "string[]",
            "value": "$judge-args"
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": false,
        "isExecutionPipeline": true,
        "producesStdout": true,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "java"
      ]
    },
    {
      "id": "f6331c35-9efe-11e7-869b-005056854569",
      "name": "Python compilation",
      "version": 2,
      "createdAt": 1506027554,
      "updatedAt": 1506027576,
      "description": "python",
      "author": "2f412539-884c-11e7-a75c-005056020108",
      "exerciseId": null,
      "supplementaryFilesIds": [],
      "pipeline": {
        "boxes": [
          {
            "name": "sources",
            "type": "file-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file",
                "value": "source-file"
              }
            }
          },
          {
            "name": "extras",
            "type": "files-in",
            "portsIn": [],
            "portsOut": {
              "input": {
                "type": "file[]",
                "value": "extra-files"
              }
            }
          },
          {
            "name": "python3c",
            "type": "python3c",
            "portsIn": {
              "source-file": {
                "type": "file",
                "value": "source-file"
              },
              "extra-files": {
                "type": "file[]",
                "value": "extra-files"
              }
            },
            "portsOut": {
              "pyc-file": {
                "type": "file",
                "value": "pyc-file"
              }
            }
          },
          {
            "name": "pyc-file",
            "type": "file-out",
            "portsIn": {
              "output": {
                "type": "file",
                "value": "pyc-file"
              }
            },
            "portsOut": []
          }
        ],
        "variables": [
          {
            "name": "source-file",
            "type": "file",
            "value": ""
          },
          {
            "name": "extra-files",
            "type": "file[]",
            "value": "$extra-file-names"
          },
          {
            "name": "pyc-file",
            "type": "file",
            "value": ""
          }
        ]
      },
      "parameters": {
        "isCompilationPipeline": true,
        "isExecutionPipeline": false,
        "producesStdout": false,
        "producesFiles": false
      },
      "runtimeEnvironmentIds": [
        "python3"
      ]
    }
  ],
  "longHTMLtoEscape": "<tbody><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/b3a62609-fd0e-11e7-b1e1-005056854569\">Compilation source file pass-through</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>1/19/2018</span> <span>12:48 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/b3a62609-fd0e-11e7-b1e1-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/cb536605-fd0e-11e7-b1e1-005056854569\">Compilation source files pass-through</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>1/19/2018</span> <span>12:49 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/cb536605-fd0e-11e7-b1e1-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/76b24558-c06d-11e7-a937-00505601122b\">ELF execution &amp; evaluation [outfile]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>11/3/2017</span> <span>9:03 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/76b24558-c06d-11e7-a937-00505601122b/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/73daa928-a22e-11e7-869b-005056854569\">ELF execution &amp; evaluation [stdout]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/26/2017</span> <span>12:16 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/73daa928-a22e-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/a723be1e-9985-11e7-869b-005056854569\">FreePascal Compilation</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/14/2017</span> <span>11:48 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/a723be1e-9985-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/38bd2dcf-9cae-11e7-869b-005056854569\">G++ Compilation</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/19/2017</span> <span>12:16 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/38bd2dcf-9cae-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/a1b191ce-9a50-11e7-869b-005056854569\">GCC Compilation</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/16/2017</span> <span>12:01 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/a1b191ce-9a50-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/ea128485-c06d-11e7-a937-00505601122b\">Java execution &amp; evaluation [outfile]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>11/3/2017</span> <span>9:06 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/ea128485-c06d-11e7-a937-00505601122b/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/f0e82fc8-9ec7-11e7-869b-005056854569\">Java execution &amp; evaluation [stdout]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/21/2017</span> <span>4:25 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/f0e82fc8-9ec7-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/46253195-9e47-11e7-869b-005056854569\">Javac Compilation</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/21/2017</span> <span>1:04 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/46253195-9e47-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/255aff53-9a50-11e7-869b-005056854569\">MCS Compilation</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/15/2017</span> <span>11:57 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/255aff53-9a50-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/3572604c-c06e-11e7-a937-00505601122b\">Mono execution &amp; evaluation [outfile]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>11/3/2017</span> <span>9:08 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/3572604c-c06e-11e7-a937-00505601122b/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/87c128f4-a22e-11e7-869b-005056854569\">Mono execution &amp; evaluation [stdout]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/26/2017</span> <span>12:17 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/87c128f4-a22e-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/0676a225-fd12-11e7-b1e1-005056854569\">Node.js execution &amp; evaluation [outfile]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>1/19/2018</span> <span>1:12 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/0676a225-fd12-11e7-b1e1-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/140a5d47-fd12-11e7-b1e1-005056854569\">Node.js execution &amp; evaluation [stdout]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>1/19/2018</span> <span>1:12 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/140a5d47-fd12-11e7-b1e1-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/ef2ec146-fcfe-11e7-b1e1-005056854569\">PHP execution &amp; evaluation [outfile]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>1/19/2018</span> <span>10:55 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/ef2ec146-fcfe-11e7-b1e1-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/9418ecf3-fcff-11e7-b1e1-005056854569\">PHP execution &amp; evaluation [stdout]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>1/19/2018</span> <span>11:00 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/9418ecf3-fcff-11e7-b1e1-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/f6331c35-9efe-11e7-869b-005056854569\">Python compilation</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/21/2017</span> <span>10:59 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/f6331c35-9efe-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/65d94507-c06e-11e7-a937-00505601122b\">Python execution &amp; evaluation [outfile]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/3c7b6918f1a036651181dae0200d8bb6.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Martin Polanka\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/7742f974-a6ea-11e7-a937-00505601122b\">Martin Polanka</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>11/3/2017</span> <span>9:10 AM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/65d94507-c06e-11e7-a937-00505601122b/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr><tr><td class=\"text-center\"><span aria-hidden=\"true\" class=\"fa fa-code\"></span></td><td><strong><a href=\"/en/app/pipelines/1079c3b4-9eff-11e7-869b-005056854569\">Python execution &amp; evaluation [stdout]</a></strong></td><td><span class=\"_1wkiiXvtd9cQ9UjVaROnEC\"><span class=\"_2h3afHxetWSNBEBkl0o-U8\"><img src=\"https://secure.gravatar.com/avatar/77082a84d2db4fae004649b07e1ec3ea.png?s=200&amp;amp;d=retro&amp;amp;r=g\" alt=\"Petr Stefan\" class=\"img-circle\" width=\"22\"></span><span class=\"_2P7VGBV2oYcvIaAEkM6Xc2\" style=\"line-height: 22px; font-size: inherit; margin-left: 5px;\"><a href=\"/en/app/user/2f412539-884c-11e7-a75c-005056020108\">Petr Stefan</a><span class=\"_2Nbc7Vq3FLKWJozbPKnOny\"></span></span></span></td><td><i><span>Public</span></i></td><td><span>9/21/2017</span> <span>10:59 PM</span></td><td class=\"text-right\"><div class=\"btn-group\"><a action=\"push\" href=\"/en/app/pipelines/1079c3b4-9eff-11e7-869b-005056854569/edit\" class=\"btn-flat btn btn-xs btn-warning\"><span aria-hidden=\"true\" class=\"fa fa-pencil\"></span> <span>Edit</span></a><span style=\"display: inline-block; position: relative;\" class=\"\"><button type=\"button\" class=\"btn-flat btn btn-xs btn-danger\"><span aria-hidden=\"true\" class=\"fa fa-trash\"></span> <span>Delete</span></button></span></div></td></tr></tbody>",
  "item1": 2,
  "item2": 4,
  "item3": 6,
  "item4": 8,
  "item5": 10,
  "item6": 12,
  "item7": 14,
  "item8": 16,
  "item9": 18,
  "item10": 20,
  "item11": 22,
  "item12": 24,
  "item13": 26,
  "item14": 28,
  "item15": 30,
  "item16": 32,
  "item17": 34,
  "item18": 36,
  "item19": 38,
  "item20": 40,
  "item21": 42,
  "item22": 44,
  "item23": 46,
  "item24": 48,
  "item25": 50,
  "item26": 52,
  "item27": 54,
  "item28": 56,
  "item29": 58,
  "item30": 60,
  "item31": 62,
  "item32": 64,
  "item33": 66,
  "item34": 68,
  "item35": 70,
  "item36": 72,
  "item37": 74,
  "item38": 76,
  "item39": 78,
  "item40": 80,
  "item41": 82,
  "item42": 84,
  "item43": 86,
  "item44": 88,
  "item45": 90,
  "item46": 92,
  "item47": 94,
  "item48": 96,
  "item49": 98,
  "item50": 100,
  "item51": 102,
  "item52": 104,
  "item53": 106,
  "item54": 108,
  "item55": 110,
  "item56": 112,
  "item57": 114,
  "item58": 116,
  "item59": 118,
  "item60": 120,
  "item61": 122,
  "item62": 124,
  "item63": 126,
  "item64": 128,
  "item65": 130,
  "item66": 132,
  "item67": 134,
  "item68": 136,
  "item69": 138,
  "item70": 140,
  "item71": 142,
  "item72": 144,
  "item73": 146,
  "item74": 148,
  "item75": 150,
  "item76": 152,
  "item77": 154,
  "item78": 156,
  "item79": 158,
  "item80": 160,
  "item81": 162,
  "item82": 164,
  "item83": 166,
  "item84": 168,
  "item85": 170,
  "item86": 172,
  "item87": 174,
  "item88": 176,
  "item89": 178,
  "item90": 180,
  "item91": 182,
  "item92": 184,
  "item93": 186,
  "item94": 188,
  "item95": 190,
  "item96": 192,
  "item97": 194,
  "item98": 196,
  "item99": 198,
  "item100": 200,
  "item101": 202,
  "item102": 204,
  "item103": 206,
  "item104": 208,
  "item105": 210,
  "item106": 212,
  "item107": 214,
  "item108": 216,
  "item109": 218,
  "item110": 220,
  "item111": 222,
  "item112": 224,
  "item113": 226,
  "item114": 228,
  "item115": 230,
  "item116": 232,
  "item117": 234,
  "item118": 236,
  "item119": 238,
  "item120": 240,
  "item121": 242,
  "item122": 244,
  "item123": 246,
  "item124": 248,
  "item125": 250,
  "item126": 252,
  "item127": 254,
  "item128": 256,
  "item129": 258,
  "item130": 260,
  "item131": 262,
  "item132": 264,
  "item133": 266,
  "item134": 268,
  "item135": 270,
  "item136": 272,
  "item137": 274,
  "item138": 276,
  "item139": 278,
  "item140": 280,
  "item141": 282,
  "item142": 284,
  "item143": 286,
  "item144": 288,
  "item145": 290,
  "item146": 292,
  "item147": 294,
  "item148": 296,
  "item149": 298,
  "item150": 300,
  "item151": 302,
  "item152": 304,
  "item153": 306,
  "item154": 308,
  "item155": 310,
  "item156": 312,
  "item157": 314,
  "item158": 316,
  "item159": 318,
  "item160": 320,
  "item161": 322,
  "item162": 324,
  "item163": 326,
  "item164": 328,
  "item165": 330,
  "item166": 332,
  "item167": 334,
  "item168": 336,
  "item169": 338,
  "item170": 340,
  "item171": 342,
  "item172": 344,
  "item173": 346,
  "item174": 348,
  "item175": 350,
  "item176": 352,
  "item177": 354,
  "item178": 356,
  "item179": 358,
  "item180": 360,
  "item181": 362,
  "item182": 364,
  "item183": 366,
  "item184": 368,
  "item185": 370,
  "item186": 372,
  "item187": 374,
  "item188": 376,
  "item189": 378,
  "item190": 380,
  "item191": 382,
  "item192": 384,
  "item193": 386,
  "item194": 388,
  "item195": 390,
  "item196": 392,
  "item197": 394,
  "item198": 396,
  "item199": 398,
  "item200": 400,
  "item201": 402,
  "item202": 404,
  "item203": 406,
  "item204": 408,
  "item205": 410,
  "item206": 412,
  "item207": 414,
  "item208": 416,
  "item209": 418,
  "item210": 420,
  "item211": 422,
  "item212": 424,
  "item213": 426,
  "item214": 428,
  "item215": 430,
  "item216": 432,
  "item217": 434,
  "item218": 436,
  "item219": 438,
  "item220": 440,
  "item221": 442,
  "item222": 444,
  "item223": 446,
  "item224": 448,
  "item225": 450,
  "item226": 452,
  "item227": 454,
  "item228": 456,
  "item229": 458,
  "item230": 460,
  "item231": 462,
  "item232": 464,
  "item233": 466,
  "item234": 468,
  "item235": 470,
  "item236": 472,
  "item237": 474,
  "item238": 476,
  "item239": 478,
  "item240": 480,
  "item241": 482,
  "item242": 484,
  "item243": 486,
  "item244": 488,
  "item245": 490,
  "item246": 492,
  "item247": 494,
  "item248": 496,
  "item249": 498,
  "item250": 500,
  "item251": 502,
  "item252": 504,
  "item253": 506,
  "item254": 508,
  "item255": 510,
  "item256": 512,
  "item257": 514,
  "item258": 516,
  "item259": 518,
  "item260": 520,
  "item261": 522,
  "item262": 524,
  "item263": 526,
  "item264": 528,
  "item265": 530,
  "item266": 532,
  "item267": 534,
  "item268": 536,
  "item269": 538,
  "item270": 540,
  "item271": 542,
  "item272": 544,
  "item273": 546,
  "item274": 548,
  "item275": 550,
  "item276": 552,
  "item277": 554,
  "item278": 556,
  "item279": 558,
  "item280": 560,
  "item281": 562,
  "item282": 564,
  "item283": 566,
  "item284": 568,
  "item285": 570,
  "item286": 572,
  "item287": 574,
  "item288": 576,
  "item289": 578,
  "item290": 580,
  "item291": 582,
  "item292": 584,
  "item293": 586,
  "item294": 588,
  "item295": 590,
  "item296": 592,
  "item297": 594,
  "item298": 596,
  "item299": 598,
  "item300": 600,
  "item301": 602,
  "item302": 604,
  "item303": 606,
  "item304": 608,
  "item305": 610,
  "item306": 612,
  "item307": 614,
  "item308": 616,
  "item309": 618,
  "item310": 620,
  "item311": 622,
  "item312": 624,
  "item313": 626,
  "item314": 628,
  "item315": 630,
  "item316": 632,
  "item317": 634,
  "item318": 636,
  "item319": 638,
  "item320": 640,
  "item321": 642,
  "item322": 644,
  "item323": 646,
  "item324": 648,
  "item325": 650,
  "item326": 652,
  "item327": 654,
  "item328": 656,
  "item329": 658,
  "item330": 660,
  "item331": 662,
  "item332": 664,
  "item333": 666,
  "item334": 668,
  "item335": 670,
  "item336": 672,
  "item337": 674,
  "item338": 676,
  "item339": 678,
  "item340": 680,
  "item341": 682,
  "item342": 684,
  "item343": 686,
  "item344": 688,
  "item345": 690,
  "item346": 692,
  "item347": 694,
  "item348": 696,
  "item349": 698,
  "item350": 700,
  "item351": 702,
  "item352": 704,
  "item353": 706,
  "item354": 708,
  "item355": 710,
  "item356": 712,
  "item357": 714,
  "item358": 716,
  "item359": 718,
  "item360": 720,
  "item361": 722,
  "item362": 724,
  "item363": 726,
  "item364": 728,
  "item365": 730,
  "item366": 732,
  "item367": 734,
  "item368": 736,
  "item369": 738,
  "item370": 740,
  "item371": 742,
  "item372": 744,
  "item373": 746,
  "item374": 748,
  "item375": 750,
  "item376": 752,
  "item377": 754,
  "item378": 756,
  "item379": 758,
  "item380": 760,
  "item381": 762,
  "item382": 764,
  "item383": 766,
  "item384": 768,
  "item385": 770,
  "item386": 772,
  "item387": 774,
  "item388": 776,
  "item389": 778,
  "item390": 780,
  "item391": 782,
  "item392": 784,
  "item393": 786,
  "item394": 788,
  "item395": 790,
  "item396": 792,
  "item397": 794,
  "item398": 796,
  "item399": 798,
  "item400": 800,
  "item401": 802,
  "item402": 804,
  "item403": 806,
  "item404": 808,
  "item405": 810,
  "item406": 812,
  "item407": 814,
  "item408": 816,
  "item409": 818,
  "item410": 820,
  "item411": 822,
  "item412": 824,
  "item413": 826,
  "item414": 828,
  "item415": 830,
  "item416": 832,
  "item417": 834,
  "item418": 836,
  "item419": 838,
  "item420": 840,
  "item421": 842,
  "item422": 844,
  "item423": 846,
  "item424": 848,
  "item425": 850,
  "item426": 852,
  "item427": 854,
  "item428": 856,
  "item429": 858,
  "item430": 860,
  "item431": 862,
  "item432": 864,
  "item433": 866,
  "item434": 868,
  "item435": 870,
  "item436": 872,
  "item437": 874,
  "item438": 876,
  "item439": 878,
  "item440": 880,
  "item441": 882,
  "item442": 884,
  "item443": 886,
  "item444": 888,
  "item445": 890,
  "item446": 892,
  "item447": 894,
  "item448": 896,
  "item449": 898,
  "item450": 900,
  "item451": 902,
  "item452": 904,
  "item453": 906,
  "item454": 908,
  "item455": 910,
  "item456": 912,
  "item457": 914,
  "item458": 916,
  "item459": 918,
  "item460": 920,
  "item461": 922,
  "item462": 924,
  "item463": 926,
  "item464": 928,
  "item465": 930,
  "item466": 932,
  "item467": 934,
  "item468": 936,
  "item469": 938,
  "item470": 940,
  "item471": 942,
  "item472": 944,
  "item473": 946,
  "item474": 948,
  "item475": 950,
  "item476": 952,
  "item477": 954,
  "item478": 956,
  "item479": 958,
  "item480": 960,
  "item481": 962,
  "item482": 964,
  "item483": 966,
  "item484": 968,
  "item485": 970,
  "item486": 972,
  "item487": 974,
  "item488": 976,
  "item489": 978,
  "item490": 980,
  "item491": 982,
  "item492": 984,
  "item493": 986,
  "item494": 988,
  "item495": 990,
  "item496": 992,
  "item497": 994,
  "item498": 996,
  "item499": 998,
  "item500": 1000
}